# pd.DateOffset(days=365)は厳密に365日を表していますが、この計算には1年におけるうるう年の影響が反映されます。
# 具体的には、365日というのは通常の年の日数であり、うるう年では366日です。pd.DateOffset(days=365)を使用すると、この影響を受けて計算が行われます。
# 例えば、以下のコードを考えてみましょう:
import pandas as pd

start_date = pd.Timestamp('2021-03-01 00:00:00')

# pd.DateOffset(days=365)を使用して1年後の日付を計算
end_date_days = start_date + pd.DateOffset(days=365)

display(end_date_days)
# この場合、2021年から2022年への1年後の計算となり、2022年はうるう年なので366日後の日付が計算されます。したがって、結果のend_dateはうるう年の影響を受けています。
# もし厳密に365日の間隔を考慮せず、365日単位で計算したい場合は、例えば365日が経過するのではなく、1年後の日付を求めたい場合は、以下のようにすることができます:

end_date_year = start_date + pd.DateOffset(years=1)

display(end_date_year)
# このようにすることで、365日かどうかにかかわらず、1年後の日付が計算されます。



# 厳密に365の期間にしたいんだけど、start_date + pd.DateOffset(days=365)で問題ないの?
# start_date + pd.DateOffset(days=365)は、厳密に365日を表しています。この計算は、365日単位で厳密に経過した期間を考慮しています。
# ただし、これは通常の年を基準としているため、うるう年の場合には366日になります。

# もし、うるう年の影響を受けずに常に365日の期間を考慮したい場合は、以下のように year パラメータを使用して年単位で計算することができます：

# end_date = start_date + pd.DateOffset(years=1)
# この場合、うるう年の影響を受けずに1年後の日付を得ることができます。どちらの方法も、あなたの要件によって選択できます。
