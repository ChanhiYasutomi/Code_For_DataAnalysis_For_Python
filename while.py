# while ループは、指定した条件が満たされている間、繰り返し処理を行うためのPythonの制御構造です。ループの開始時に条件を評価し、条件が True の場合にループ本体が実行されます。
# ループ内で条件が False になるか、ループを終了させる方法（たとえば break ステートメント）がない限り、繰り返し処理は続きます。以下に具体的な例を示します。
# 例: while ループでカウントダウンするプログラム
count = 5

while count > 0:
    print(count)
    count -= 1

print("ループ終了")

# このプログラムは、count の値が5から1に減るまでカウントダウンします。while ループの条件 count > 0 が満たされている間、ループ内の処理が実行され、count の値が1ずつ減少します。ループが終了する条件が count <= 0 になると、ループが終了し、"ループ終了" というメッセージが表示されます。
# 出力:
# 5
# 4
# 3
# 2
# 1
# ループ終了
# while ループは、条件に基づいて繰り返し処理を行うため、特定の条件が満たされた場合に処理を停止するのに適しています。上記の例では、カウントダウンが終了するとループが終了しました。



# break ステートメントは、while ループや for ループなどの繰り返し処理から強制的に抜け出すためのPythonの制御構造です。具体的な例を示します。
# 例: while ループと break ステートメントを使用して、特定の条件を満たしたらループを終了するプログラム
# 以下のプログラムは、while ループ内でユーザーに対して数値の入力を求め、特定の条件（ここでは0を入力すると）を満たしたらループを終了する例です。
while True:
    user_input = int(input("整数を入力してください（0で終了）: "))
    
    if user_input == 0:
        print("ループを終了します。")
        break  # 条件を満たしたらループを終了
    
    # ユーザーが入力した数値を表示
    print(f"入力された数値は {user_input} です。")

print("プログラム終了")

# このプログラムでは、while ループの条件は常に True であり、ユーザーに数値の入力を求め続けます。
# ユーザーが0を入力すると、if 文が条件を満たし、break ステートメントが実行されてループが終了します。それ以外の場合は、ユーザーが入力した数値を表示し、再び入力を求めます。
# このプログラムは、ユーザーが0を入力するとループが終了し、"ループを終了します。" というメッセージが表示されます。そして、最終的に "プログラム終了" というメッセージが表示されます。
# break ステートメントを使用することで、特定の条件が満たされた場合にループを終了できるため、プログラムの制御を柔軟に行うことができます。
