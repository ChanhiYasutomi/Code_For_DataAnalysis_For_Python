# einsumは、NumPyライブラリ内の便利な関数の1つで、多次元配列を操作するために使用されます。einsumは、Einsteinの縮約規則を使用してテンソルの操作を行うための柔軟な方法を提供します。以下に、具体的なPythonコード例を挙げて、einsumの基本的な使い方を説明します。
# 例として、2つの行列AとBを考え、それらを行列積として計算する場合を考えてみましょう。

import numpy as np

# 行列AとBを作成
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

# 行列積を計算
C = np.einsum('ij,jk->ik', A, B)

print(C)

# このコードでは、einsum関数に2つの引数を渡しています。最初の引数は式で、Einsteinの縮約記法を使用して、テンソルの操作を指定します。この場合、'ij,jk->ik'という式は次のように解釈されます。
# ijは行列Aのインデックスを表し、iとjは行列Aの行と列を指します。
# jkは行列Bのインデックスを表し、jとkは行列Bの行と列を指します。
# ->は出力テンソルの形状を示し、ikは出力行列Cの行と列を指定します。
# このeinsumの式は、行列積の計算を行います。結果は行列Cに格納され、次のようになります：

# [[19 22]
#  [43 50]]

# このように、einsumを使用することで、テンソルの操作を柔軟に指定できます。einsumは、行列積の他にも多くの異なる操作に使用できます。必要に応じて式を調整して、さまざまなテンソル演算を行うことができます。

# テンソルの要素の合計を計算する例：
# 3次元テンソルを作成
T = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])

# 各要素の合計を計算
result = np.einsum('ijk->', T)

print(result)  # 出力: 36

# 行列のトレース（対角要素の和）を計算する例：

# 行列を作成
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# 行列のトレースを計算
trace = np.einsum('ii', A)

print(trace)  # 出力: 15

# ベクトルの内積を計算する例：

# ベクトルを作成
v1 = np.array([1, 2, 3])
v2 = np.array([4, 5, 6])

# ベクトルの内積を計算
dot_product = np.einsum('i,i->', v1, v2)

print(dot_product)  # 出力: 32

# テンソルの転置を行う例：

# 2次元テンソルを作成
T = np.array([[1, 2], [3, 4]])

# テンソルを転置
T_transposed = np.einsum('ij->ji', T)
print(T_transposed)

# これらの例は、einsumを使用してさまざまなテンソル操作を行う方法を示しています。einsumを使用することで、高次元のテンソル演算を効率的に実行できます。
